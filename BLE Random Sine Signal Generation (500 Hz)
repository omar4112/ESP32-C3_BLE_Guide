/*
This code sets up ESP32-C3 as a BLE server that, once connected to a client, regularly sends sine wave data
Over BLE. 
*/

// Include necessary libraries for BLE functionality
#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>
#include <BLE2902.h>

// Define UUIDs for the BLE service and characteristic
#define SERVICE_UUID            "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define CHARACTERISTIC_UUID_TX  "beb5483e-36e1-4688-b7f5-ea07361b26a8"

// Declare a pointer for the BLE characteristic
BLECharacteristic* pCharacteristic;

// Flag to track if a BLE device is connected
bool deviceConnected = false;

// Set the frequency of the sine wave in Hz
float frequency = 100.0; 

// Variable to keep track of time elapsed
unsigned long timeElapsed = 0;

// Define a class that inherits from BLEServerCallbacks to handle BLE events
class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
        // Set the flag true when a device connects
        deviceConnected = true;
    }

    void onDisconnect(BLEServer* pServer) {
        // Set the flag false when a device disconnects
        deviceConnected = false;
    }
};

// Setup function runs once at the start
void setup() {
    // Initialize serial communication at 115200 baud rate
    Serial.begin(115200);
    // Print a message to the serial console
    Serial.println("Starting BLE work!");

    // Initialize BLE device with a name "ESP32"
    BLEDevice::init("ESP32");

    // Create a new BLE server
    BLEServer *pServer = BLEDevice::createServer();
    // Set the server callbacks
    pServer->setCallbacks(new MyServerCallbacks());

    // Create a new BLE service
    BLEService *pService = pServer->createService(SERVICE_UUID);

    // Create a BLE characteristic for transmission
    pCharacteristic = pService->createCharacteristic(
        CHARACTERISTIC_UUID_TX,
        BLECharacteristic::PROPERTY_NOTIFY
    );

    // Create and add a new descriptor to the characteristic
    BLE2902* p2902 = new BLE2902();
    pCharacteristic->addDescriptor(p2902);

    // Start the BLE service
    pService->start();

    // Start advertising the BLE service
    pServer->getAdvertising()->start();
    // Print a message to the serial console
    Serial.println("Waiting for a client connection to notify...");
}

// Loop function runs repeatedly
void loop() {
    // Check if a device is connected
    if (deviceConnected) {
        // Get the current time
        unsigned long currentTime = millis();

        // Check if it's time to send another sine wave value
        if (currentTime - timeElapsed >= 1000 / frequency) {
            // Update the time elapsed
            timeElapsed = currentTime;

            // Set the amplitude and offset of the sine wave
            float amplitude = 10.0;
            float offset = 0.0;

            // Loop to generate and send sine wave values
            for (int i = 0; i < 100; i++) {
                // Calculate the sine wave value
                float value = amplitude * sin(2 * M_PI * frequency * i / 100) + offset;
                // Set the characteristic's value
                pCharacteristic->setValue(String(value).c_str());
                // Notify the client with the new value
                pCharacteristic->notify();
                // Delay to control the rate of transmission
                delay(2);
            }
        }
    }
}
    pCharacteristic->addDescriptor(p2902);

    // Start the service
    pService->start();

    // Start advertising
    pServer->getAdvertising()->start();
    Serial.println("Waiting for a client connection to notify...");
}

void loop() {
    if (deviceConnected) {
        unsigned long currentTime = millis();

        if (currentTime - timeElapsed >= 1000 / frequency) {
            timeElapsed = currentTime;

            float amplitude = 10.0; // Amplitude of the sine wave
            float offset = 0.0;    // Offset of the sine wave

            // Generate the sine wave values
            for (int i = 0; i < 100; i++) {
                float value = amplitude * sin(2 * M_PI * frequency * i / 100) + offset;
                pCharacteristic->setValue(String(value).c_str());
                pCharacteristic->notify();
                delay(2); // Adjusted delay to control the transmission rate (1000ms/500Hz = 2ms)
            }
        }
    }
}
